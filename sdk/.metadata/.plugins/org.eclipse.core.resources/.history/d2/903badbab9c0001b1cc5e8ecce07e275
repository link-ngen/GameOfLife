/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   115200
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xparameters.h"
#include "xil_printf.h"
#include "gol_microblaze.h"
#include "gol_driver.h"
//#include "gol_defines.h"

//Xuint8 pattern[GOL_SIZE] = {
//		0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,
//		0,0,0,1,0,1,0,0,0,0,0,0,1,0,1,0,0,0,
//		0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,
//		1,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,1,
//		1,1,0,1,0,1,0,0,1,1,0,0,1,0,1,0,1,1,
//		0,0,0,1,0,1,0,1,0,0,1,0,1,0,1,0,0,0,
//		0,0,0,1,0,1,0,1,0,0,1,0,1,0,1,0,0,0,
//		1,1,0,1,0,1,0,0,1,1,0,0,1,0,1,0,1,1,
//		1,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,1,
//		0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,
//		0,0,0,1,0,1,0,0,0,0,0,0,1,0,1,0,0,0,
//		0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0
//};

//Xuint8 pattern[SIZE_OF_GRID] = {
//		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
//		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
//		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
//		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
//		0,0,1,1,1,0,0,1,0,0,0,1,1,0,0,0,0,0,
//		0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,
//		0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,
//		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
//		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
//		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
//		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
//		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
//};

Xuint8 pattern[GOL_SIZE] = {
		1,0,0,0,1,
		0,1,0,0,1,
		0,0,1,0,0,
		1,1,0,0,0
};

Xuint8 outputs[GOL_SIZE] = {0};

void print_array(Xuint8*);
void delay_ms(Xuint32 ms);

int main()
{
	init_platform();

	Xuint32 iter_cnt = 0;

	for(Xuint32 i=0; i < GOL_SIZE; i++) // globals don't re-initialize after reset button ;(
		outputs[i] = pattern[i];

	while(1)
	{
		xil_printf("=========================\n");
		xil_printf("Iterations: %d\n", iter_cnt++);
		xil_printf("=========================\n");

		print_array(outputs);
		microblaze_init_gol(outputs);
		microblaze_calc_next_iter(1);
		delay_ms(400);
		microblaze_read_gol(outputs);
		if (iter_cnt == 3) break;
	}


//	init_gol(XPAR_GAME_OF_LIFE_0_S00_AXI_BASEADDR, outputs); // default iterations = 1;
//
//	while(1)
//	{
//		xil_printf("=========================\n");
//		xil_printf("Iterations: %d\n", iter_cnt++);
//		xil_printf("=========================\n");
//		print_array(outputs);
//
//		write_gol(outputs);
//		run_gol();
//
//		delay_ms(400);
//
//		while((read_reg(GOL_CTRL_REGISTER) & GMI) == 1);  // formality
//
//		read_gol(outputs);
//
//		if (iter_cnt == 3) break;
//	}



	cleanup_platform();
	return 0;
}

void delay_ms(Xuint32 ms)
{
	#define LOOPS_PER_MS 12500
	volatile Xuint32 counter = LOOPS_PER_MS * ms;
	while(counter--);
}

void print_array(Xuint8* array)
{
	for (Xuint32 idx = 0; idx < GOL_SIZE; ++idx)
	{
		if (array[idx] == 0x01)
		{
			xil_printf(" * ");
		}
		else if (array[idx] == 0x00)
		{
			xil_printf(" - ");
		}
		if ((idx % WIDTH) == WIDTH-1)
		{
			xil_printf("\n");
		}
	}
}
